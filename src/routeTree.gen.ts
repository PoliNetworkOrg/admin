/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TesttrpcIndexImport } from './routes/testtrpc/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as AccountIndexImport } from './routes/account/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TesttrpcIndexRoute = TesttrpcIndexImport.update({
  id: '/testtrpc/',
  path: '/testtrpc/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const AccountIndexRoute = AccountIndexImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/account/': {
      id: '/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/testtrpc/': {
      id: '/testtrpc/'
      path: '/testtrpc'
      fullPath: '/testtrpc'
      preLoaderRoute: typeof TesttrpcIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountIndexRoute
  '/login': typeof LoginIndexRoute
  '/testtrpc': typeof TesttrpcIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountIndexRoute
  '/login': typeof LoginIndexRoute
  '/testtrpc': typeof TesttrpcIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/account/': typeof AccountIndexRoute
  '/login/': typeof LoginIndexRoute
  '/testtrpc/': typeof TesttrpcIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/account' | '/login' | '/testtrpc'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/account' | '/login' | '/testtrpc'
  id: '__root__' | '/' | '/account/' | '/login/' | '/testtrpc/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountIndexRoute: typeof AccountIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  TesttrpcIndexRoute: typeof TesttrpcIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountIndexRoute: AccountIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  TesttrpcIndexRoute: TesttrpcIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/account/",
        "/login/",
        "/testtrpc/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/account/": {
      "filePath": "account/index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/testtrpc/": {
      "filePath": "testtrpc/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
